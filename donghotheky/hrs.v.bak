module hrs(rst_n, clk, set_ones, set_tens, hrs_en, hrs_ones, hrs_tens);

    input rst_n, clk, hrs_en;
	input [3:0] set_ones;
	input [1:0] sec_tens;
    output reg [3:0] hrs_ones;
    output reg [1:0] hrs_tens;

always @(posedge clk or negedge rst_n) begin
	if (~rst_n)
	       hrs_ones <= 3'd0;
	else if(set_ones != 3'd0) hrs_ones <= set_ones;
	else if (hrs_en)
	begin
		if (hrs_ones == 3'd9 || ({hrs_tens,hrs_ones} == 6'b100011)) // b10 = d2; 4'b0011 = d3
			hrs_ones <= 3'd0;
		else
			hrs_ones <= hrs_ones +1;
	end
end

always @(posedge clk or negedge rst_n) begin
	if (~rst_n)
	       hrs_tens <= 1'd0;
	else if(set_tens != 1'd0) hrs_tens <= set_tens;
	else if (hrs_en)
	begin
		if ({hrs_tens,hrs_ones} == 6'b100011) // b10 = d2; 4'b0011 = d3  
			hrs_tens <= 1'd0;
		else if (hrs_ones == 3'd9)
			hrs_tens <= hrs_tens + 1;
	end
end

endmodule
