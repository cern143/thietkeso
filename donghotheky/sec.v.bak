module sec (rst_n, set_ones, set_tens, clk, sec_en, sec_ones, sec_tens);
    input rst_n, clk, sec_en;
	input [3:0] set_ones;
	input [2:0] set_tens;
    output reg [3:0] sec_ones;
    output reg [2:0] sec_tens;

always @(posedge m_clk or negedge rst_n) begin
	if (~rst_n)
	       sec_ones <= 3'd0;
	else if(set_ones != 3'd0) sec_ones <= set_ones;
	else if (sec_en)
	begin
		if (sec_ones == 3'd9)
			sec_ones <= 3'd0;
		else
			sec_ones <= sec_ones + 1;
	end
end

always @(posedge m_clk or negedge rst_n) begin
	if (~rst_n)
	       sec_tens <= 2'd0;
	else if(set_tens != 2'd0)) set_tens <= set_tens;
	else if (sec_en && (sec_ones == 3'd9))
	begin
		if (sec_tens == 2'd5)
			sec_tens <= 2'd0;
		else
			sec_tens <= sec_tens + 1;
	end
end

endmodule